// automatically generated by the FlatBuffers compiler, do not modify

package me.gm.cleaner.schema.pathtree

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class FileNode : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FileNode {
        __init(_i, _bb)
        return this
    }
    val name : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val size : Long
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    val lastModifiedTime : Long
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    val lastAccessTime : Long
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    val creationTime : Long
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsFileNode(_bb: ByteBuffer): FileNode = getRootAsFileNode(_bb, FileNode())
        fun getRootAsFileNode(_bb: ByteBuffer, obj: FileNode): FileNode {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createFileNode(builder: FlatBufferBuilder, nameOffset: Int, size: Long, lastModifiedTime: Long, lastAccessTime: Long, creationTime: Long) : Int {
            builder.startTable(5)
            addCreationTime(builder, creationTime)
            addLastAccessTime(builder, lastAccessTime)
            addLastModifiedTime(builder, lastModifiedTime)
            addSize(builder, size)
            addName(builder, nameOffset)
            return endFileNode(builder)
        }
        fun startFileNode(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(0, name, 0)
        fun addSize(builder: FlatBufferBuilder, size: Long) = builder.addLong(1, size, 0L)
        fun addLastModifiedTime(builder: FlatBufferBuilder, lastModifiedTime: Long) = builder.addLong(2, lastModifiedTime, 0L)
        fun addLastAccessTime(builder: FlatBufferBuilder, lastAccessTime: Long) = builder.addLong(3, lastAccessTime, 0L)
        fun addCreationTime(builder: FlatBufferBuilder, creationTime: Long) = builder.addLong(4, creationTime, 0L)
        fun endFileNode(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
